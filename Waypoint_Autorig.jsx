// Rig for Athena Demosfunction BuildUI(thisObj) {    var win = thisObj instanceof Panel ? thisObj : new Window("palette", "AutoRig", undefined, {        resizeable: true    });    win.layerRig = win.add("button", [10, 5, 150, 35], "Rig Layer");    win.layerRig.onClick = rigLayer;    win.lightRig = win.add("button", [155, 5, 300, 35], "Rig Lights");    win.lightRig.onClick = rigLight;}// Insantiate the user interfaceBuildUI(this);function rigLayer() {    //var inertialBounce = "n = 0; if (numKeys > 0){n = nearestKey(time).index;if (key(n).time > time){ n--; } } if (n == 0){ t = 0; }else{ t = time - key(n).time; } if (n > 0){ v = velocityAtTime(key(n).time - thisComp.frameDuration/10); amp = .05; freq = 4.0; decay = 2.0; value + v*amp*Math.sin(freq*t*2*Math.PI)/Math.exp(decay*t); }else{ value; }"    app.beginUndoGroup("Rig");    var curComp = app.project.activeItem;    var selLayers = curComp.selectedLayers;    if (selLayers.length < 2) {        alert("Please select the control layer, then layers to be controlled");        return;    }    var ctrlLayer = selLayers[0];    if (ctrlLayer.property("Effects")("Global Extrusion Depth") == undefined) {        var extrude = ctrlLayer.property("Effects").addProperty("ADBE Slider Control");        extrude.name = "Global Extrusion Depth";    } else {        var extrude = ctrlLayer.effect("Global Extrusion Depth");    }    for (var i = 1; i < selLayers.length; i++) {        var effectName = selLayers[i].name + " Extrude";        var sliderControl = ctrlLayer.property("Effects").addProperty("ADBE Slider Control");        sliderControl.name = effectName;    }    app.endUndoGroup();}function rigLight() {    app.beginUndoGroup("Rig Lights");    var curComp = app.project.activeItem;    // Create the ambient Light    var ambLight = curComp.layers.addLight("Ambient Light", [0, 0]);    ambLight.position.setValue([curComp.width / 2, curComp.height / 2, 500]);    ambLight.lightType = LightType.AMBIENT;    // Create the point light    var pntLight = curComp.layers.addLight("Point Light", [0, 0]);    pntLight.position.setValue([curComp.width / 2, curComp.height / 2, -500]);    pntLight.lightType = LightType.POINT;    // The Point light must cast shadows    pntLight.lightOption.castsShadows.setValue(1);    // Up the shadow diffusion    pntLight.lightOption.shadowDiffusion.setValue(100.0);    // Set up the dimmer     dimmerSetup(curComp);    // Now that the dimmer is set up, create the expressions on the lights.    pntLight.lightOption.intensity.expression = "linear(thisComp.layer(\"Dimmer CTRL\").effect(\"Light Dimmer\")(\"Slider\"), 0, 100, 0, 150)";    ambLight.lightOption.intensity.expression = "linear(thisComp.layer(\"Dimmer CTRL\").effect(\"Light Dimmer\")(\"Slider\"), 0, 100, 100, 0)";    // Create a "Light Targets" layer to hold the sequencing of the lights.     var lightTargetsLayer = curComp.addNull();    lightTargetsLayer.name = "Light Targets";    var firstTarget = lightTargetsLayer.property("Effects").addProperty("ADBE Layer Control");    firstTarget.name = "Target 1";    // ...And now the Waypoint expression on the position of the the point light. Defined below because that     var waypointExp = "l=thisComp.layer(\"Dimmer CTRL\"),curLightCtrl=l.effect(\"Light Position\")(\"Slider\"),z=thisProperty[2];for(var d=!1,numTargets=2;0==d;)try{numTargets++,t=l.effect(numTargets)}catch(err){numTargets-=3,d=!0}for(var waypoints=new Array,curLayer=null,i=3;numTargets+3>i;i++)curLayer=l.effect(i)(\"Layer\"),waypoints.push([curLayer.position[0],curLayer.position[1]]);if(curLightCtrl.numKeys>1){if(nk=curLightCtrl.nearestKey(time),nk.time>=time)1==nk.index?(prevKey=nk,nextKey=nk):(prevKey=curLightCtrl.key(nk.index-1),nextKey=nk);else{prevKey=nk;try{nextKey=curLightCtrl.key(nk.index+1)}catch(err){nextKey=nk}}var xmin,xmax,ymin,ymax=null,minIndex,maxIndex=null,prevKeyValue=Math.round(prevKey.value),nextKeyValue=Math.round(nextKey.value);minIndex=clamp(prevKeyValue,0,numTargets-1),maxIndex=clamp(nextKeyValue,0,numTargets-1),x=linear(time,prevKey.time,nextKey.time,waypoints[minIndex][0],waypoints[maxIndex][0]),y=linear(time,prevKey.time,nextKey.time,waypoints[minIndex][1],waypoints[maxIndex][1])}else try{x=waypoints[0],y=waypoints[1]}catch(err){x=thisComp.width/2,y=thisComp.height/2};";    pntLight.position.expression = waypointExp;    app.endUndoGroup();}function dimmerSetup(curComp) {    // Check for Dimmer Layer    // Create the camera    var theCamera = curComp.layers.addCamera("Main Cam", [curComp.width / 2, curComp.height / 2]);    theCamera.position.setValue([curComp.width / 2, curComp.height / 2, theCamera.position.value[2]]);    // Create the camera parent    var camParent = curComp.layers.addNull();    camParent.name = "Camera Parent Null";    camParent.threeDLayer = true;    camParent.position.setValue([curComp.width / 2, curComp.height / 2, 0]);    // Create the camera controls    var camCtrl = camParent.duplicate();    camCtrl.name = "Camera CTRL";    // Expressions!    camParent.position.expression = "x = thisComp.layer(\"Camera CTRL\").transform.position[0]; y = thisComp.layer(\"Camera CTRL\").transform.position[1]; z = 0; [x,y,z];";    camParent.transform.orientation.expression = "thisComp.layer(\"Camera CTRL\").transform.orientation";    camParent.transform.xRotation.expression = "thisComp.layer(\"Camera CTRL\").transform.xRotation";    camParent.transform.yRotation.expression = "thisComp.layer(\"Camera CTRL\").transform.yRotation";    camParent.transform.zRotation.expression = "thisComp.layer(\"Camera CTRL\").transform.zRotation";    // DEPRECATED: Create the dolly controlz    //z    // var dolly = camParent("Effects").addProperty("ADBE Slider Control");    // dolly.name = "Dolly";    theCamera.parent = camParent;    theCamera.position.expression = "ctrl = thisComp.layer(\"Camera CTRL\").transform.position[2]; [thisProperty[0], thisProperty[1], thisProperty[2] + ctrl];"    theCamera.locked = true;    camParent.locked = true;    // DIMMER    var dimmerPresent = false;    var dimmerLayer = null;    var dimmerSlider = null;    for (var i = 1; i < curComp.numLayers + 1; i++) {        if (curComp.layer(i).name == "Dimmer CTRL") {            dimmerPresent = true;            dimmerLayer = curComp.layer(i);            // Try to find the dimmer slider             try {                dimmerSlider = dimmerLayer.effect("Light Dimmer")("Slider")            }            // If it doesn't exist, add the slider             catch (err) {                dimmerSlider = curComp.layer(i)("Effects").addProperty("ADBE Slider Control");                // Reassign to access the actual slider                 dimmerSlider.name = "Light Dimmer";                dimmerSlider = curComp.layer(i).effect("Light Dimmer")("Slider");                // Clamp the range                dimmerSlider.expression = "clamp(thisProperty, 0,100);"            }            break;        }    }    // Make the dimmer if it doesn't already exist    if (dimmerLayer == null) {        dimmerLayer = curComp.layers.addNull();        dimmerLayer.name = "Dimmer CTRL";        // Create an effect slider        dimmerSlider = dimmerLayer.property("Effects").addProperty("ADBE Slider Control");        dimmerSlider.name = ("Light Dimmer")        // Reassign the variable to grab tha actual slider        dimmerSlider = dimmerSlider.property("Slider");        // Clamp the range        dimmerSlider.expression = "clamp(thisProperty, 0,100);"    }}